### **RatesPullViewAPRSorCreateNewOffers_262142.cs **
```csharp
using OpenQA.Selenium;
using Origination.Utils;
using System;
using System.Collections.Generic;

namespace Origination.PageObjects
{
    public class RatesPullViewAPRSorCreateNewOffers_262142
    {
        private IWebDriver driver;
        private GenericHelper helper;

        // Define constants for XPath values
        private static readonly Dictionary<string, string> XPaths = new Dictionary<string, string>
        {
            { "CaptivePartnerDropDown", "(//div[@class='rims-nav-item'])[2]/select" },
            { "Incentive", "//label[text()='Incentives']" },
            { "RetailAPRDelta", "(//div[contains(text(),'Retail APR Delta')])[1]" },
            { "NewRetailAPRDelta", "(//button[contains(@class,'create-card-element round-button')])[1]" },
            { "EffectiveFrom", "(//input[contains(@name,'dp')])[1]" },
            { "MinTerm", "(//input[contains(@name,'minTerm')])[1]" },
            { "MaxTerm", "(//input[contains(@name,'maxTerm')])[1]" },
            { "Tier2Delta", "//label[@for='tier2']" },
            { "Tier3Delta", "//label[@for='tier3']" },
            { "Tier4Delta", "//label[@for='tier4']" },
            { "ZeroRate1", "//input[@id='zeroRateTier2Amount']" },
            { "NonZeroRate1", "//input[@id='nonZeroRateTier2Amount']" },
            { "ZeroRate2", "//input[@id='zeroRateTier3Amount']" },
            { "NonZeroRate2", "//input[@id='nonZeroRateTier3Amount']" },
            { "ZeroRate3", "//input[@id='zeroRateTier4Amount']" },
            { "NonZeroRate3", "//input[@id='nonZeroRateTier4Amount']" },
            { "Save", "(//button[text()='Save'])[1]" },
            { "Submit", "(//button[text()='Submit'])[1]" },
            { "PendingApproval", "//label[contains(text(),'Pending Approval')]" },
            { "ManagerApproved", "(//label[@for='Manager-Approved'])[1]" },
            { "Approve", "(//div[contains(text(),'7')])[1]/following::div[1]/button[2]" },
            { "ReadyToPublish", "(//label[@for='ReadyToPublish'])[1]" },
            { "ViewAPRSorCreateNewOffers", "(//div[@class='card-text text-center'])[3]" },
            { "CreateViewAPRSorCreateNewOffers", "//button[@class='create-card-element round-button']" },
            { "Tier2", "//label[@for='tier2']" },
            { "Tier3", "//label[@for='tier3']" },
            { "Tier4", "//label[@for='tier4']" },
            { "Tier2ZeroRate", "//td[contains(text(),'3')]" },
            { "Tier3ZeroRate", "//td[contains(text(),'4')]" },
            { "Tier4ZeroRate", "//td[contains(text(),'5')]" }
        };

        public RatesPullViewAPRSorCreateNewOffers_262142(IWebDriver driver)
        {
            this.driver = driver;
            this.helper = new GenericHelper(driver);
        }

        public IWebElement GetElement(string key)
        {
            try
            {
                return driver.FindElement(By.XPath(XPaths[key]));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error locating element with key {key}: {ex.Message}");
                throw;
            }
        }

        public void ClickElement(string key)
        {
            try
            {
                helper.clickElement(GetElement(key));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error clicking element with key {key}: {ex.Message}");
                throw;
            }
        }

        public void EnterText(string key, string value)
        {
            try
            {
                helper.EnterText(GetElement(key), value);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error entering text in element with key {key}: {ex.Message}");
                throw;
            }
        }

        public bool VerifyElementDisplayed(string key)
        {
            try
            {
                return helper.AssertionFunction(GetElement(key));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error verifying element with key {key}: {ex.Message}");
                throw;
            }
        }
    }
}
```

### **VerifyRatesPullViewAPRSorCreateNewOffers_262142.cs **
```csharp
using System;
using System.IO;
using Newtonsoft.Json.Linq;
using OpenQA.Selenium;
using Origination.PageObjects;
using Origination.Utils;

namespace Origination.Tests
{
    public class VerifyRatesPullViewAPRSorCreateNewOffers_262142
    {
        public static void Main(string[] args)
        {
            try
            {
                string jsonFilePath = "RatesPullViewAPRSorCreateNewOffersDetos.json";
                var jsonData = JObject.Parse(File.ReadAllText(jsonFilePath));

                string username = jsonData["username"].ToString();
                string password = jsonData["password"].ToString();
                string effFromDay = jsonData["effFromDay"].ToString();
                string effFromMonth = jsonData["effFromMonth"].ToString();
                string effFromYear = jsonData["effFromYear"].ToString();
                string minTerm = jsonData["Min Term"].ToString();
                string maxTerm = jsonData["Max Term"].ToString();
                string zeroRate1 = jsonData["ZeroRate1"].ToString();
                string nonZeroRate1 = jsonData["NonZeroRate1"].ToString();
                string zeroRate2 = jsonData["ZeroRate2"].ToString();
                string nonZeroRate2 = jsonData["NonZeroRate2"].ToString();
                string zeroRate3 = jsonData["ZeroRate3"].ToString();
                string nonZeroRate3 = jsonData["NonZeroRate3"].ToString();

                IWebDriver driver = new OpenQA.Selenium.Chrome.ChromeDriver();
                GenericHelper helper = new GenericHelper(driver);
                RatesPullViewAPRSorCreateNewOffers_262142 page = new RatesPullViewAPRSorCreateNewOffers_262142(driver);

                Console.WriteLine("Step 21: Click on the 'Incentives' tab.");
                page.ClickElement("Incentive");

                Console.WriteLine("Step 22: Click on the 'Retail APR Delta' button.");
                page.ClickElement("RetailAPRDelta");

                Console.WriteLine("Step 23: Click 'Pending Approval' Tab.");
                page.ClickElement("PendingApproval");

                Console.WriteLine("Step 24: Click 'Approve' button.");
                page.ClickElement("Approve");

                Console.WriteLine("Step 25: Click on 'Manager Approved'.");
                page.ClickElement("ManagerApproved");

                Console.WriteLine("Step 26: Verify ChangeSetID is same as 'FirstChangeSetID'.");
                string firstChangeSetID = driver.FindElement(By.XPath("(//div[@class='changeset-id col ng-star-inserted'])[1]")).Text;
                string changeSetID = driver.FindElement(By.XPath("(//div[@class='changeset-id col ng-star-inserted'])[1]")).Text;
                if (firstChangeSetID == changeSetID)
                {
                    Console.WriteLine("ChangeSetID matches FirstChangeSetID.");
                }
                else
                {
                    Console.WriteLine("ChangeSetID does not match FirstChangeSetID.");
                }

                Console.WriteLine("Step 27: Execute 'Move To Ready To Publish' Stored Procedure.");
                // Execute stored procedure logic here
                ExecuteStoredProcedure("MoveToReadyToPublish");

                Console.WriteLine("Step 28: Click on 'Ready To Publish' section.");
                page.ClickElement("ReadyToPublish");

                Console.WriteLine("Step 29: Verify ChangeSetID is same as 'FirstChangeSetID'.");
                changeSetID = driver.FindElement(By.XPath("(//div[@class='changeset-id col ng-star-inserted'])[1]")).Text;
                if (firstChangeSetID == changeSetID)
                {
                    Console.WriteLine("ChangeSetID matches FirstChangeSetID.");
                }
                else
                {
                    Console.WriteLine("ChangeSetID does not match FirstChangeSetID.");
                }

                Console.WriteLine("Step 30: Click on the 'Incentives' tab.");
                page.ClickElement("Incentive");

                Console.WriteLine("Step 31: Click on the 'View APRS or Create New Offers' button.");
                page.ClickElement("ViewAPRSorCreateNewOffers");

                Console.WriteLine("Step 32: Click on 'Create a New Special APR Offer' button.");
                page.ClickElement("CreateViewAPRSorCreateNewOffers");

                Console.WriteLine("Step 33: Select Effective From Date from Calendar.");
                page.SelectEffectiveFromDate(effFromDay, effFromMonth, effFromYear);

                Console.WriteLine("Step 34: Click 'Tier2' checkbox.");
                page.ClickElement("Tier2");

                Console.WriteLine("Step 35: Click 'Tier3' checkbox.");
                page.ClickElement("Tier3");

                Console.WriteLine("Step 36: Click 'Tier4' checkbox.");
                page.ClickElement("Tier4");

                Console.WriteLine("Step 37: Verify 'Tier2ZeroRate' is displayed.");
                if (page.VerifyElementDisplayed("Tier2ZeroRate"))
                {
                    Console.WriteLine("Tier2ZeroRate is displayed.");
                }
                else
                {
                    Console.WriteLine("Tier2ZeroRate is not displayed.");
                }

                Console.WriteLine("Step 38: Verify 'Tier3ZeroRate' is displayed.");
                if (page.VerifyElementDisplayed("Tier3ZeroRate"))
                {
                    Console.WriteLine("Tier3ZeroRate is displayed.");
                }
                else
                {
                    Console.WriteLine("Tier3ZeroRate is not displayed.");
                }

                Console.WriteLine("Step 39: Verify 'Tier4ZeroRate' is displayed.");
                if (page.VerifyElementDisplayed("Tier4ZeroRate"))
                {
                    Console.WriteLine("Tier4ZeroRate is displayed.");
                }
                else
                {
                    Console.WriteLine("Tier4ZeroRate is not displayed.");
                }

                driver.Quit();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }

        private static void ExecuteStoredProcedure(string procedureName)
        {
            try
            {
                Console.WriteLine($"Executing stored procedure: {procedureName}");
                // Add logic to execute the stored procedure
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error executing stored procedure {procedureName}: {ex.Message}");
                throw;
            }
        }
    }
}
```